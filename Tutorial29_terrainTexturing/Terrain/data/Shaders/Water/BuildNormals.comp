#version 450

// gimage* requires binding via glBindImageTexture
// sampler* requires binding via glBindTexture

// ImageStore/Load only works for pure textures.  It does not work for textures attached to an FBO.
// Textures that are attached to an FBO must be passed in as a sampler instead of as an image.

layout( binding = 0, rgba32f ) uniform readonly image2D sourceTex;
layout ( binding = 1 ) uniform writeonly image2D destTex;

uniform int patch_dim;
uniform float patch_length;

#define WORK_GROUP_SIZE 32
layout ( local_size_x = WORK_GROUP_SIZE, local_size_y = WORK_GROUP_SIZE, local_size_z = 1 ) in;

/*
 ==========================
 main
 ==========================
 */
void main() {
	ivec2 stCenter = ivec2( gl_GlobalInvocationID.xy );
	
	ivec2 pdx;
	ivec2 ndx;
	ivec2 pdy;
	ivec2 ndy;
	ivec2 STs[ 4 ];
	{		
		STs[ 0 ] = stCenter + ivec2(-1, 0 );
		STs[ 1 ] = stCenter + ivec2( 1, 0 );
		STs[ 2 ] = stCenter + ivec2( 0,-1 );
		STs[ 3 ] = stCenter + ivec2( 0, 1 );
		
		pdx = stCenter + ivec2( 1, 0 );
		ndx = stCenter + ivec2(-1, 0 );
		pdy = stCenter + ivec2( 0, 1 );
		ndy = stCenter + ivec2( 0,-1 );
		
		if ( ndx.x < 0 ) {
			ndx.x = patch_dim - 1;
		}
		if ( pdx.x >= patch_dim ) {
			pdx.x = 0;
		}
		
		if ( ndy.y < 0 ) {
			ndy.y = patch_dim - 1;
		}
		if ( pdy.y >= patch_dim ) {
			pdy.y = 0;
		}
		
		if ( STs[ 0 ].x < 0 ) {
			STs[ 0 ].x = patch_dim - 1;
		}
		if ( STs[ 1 ].x > patch_dim - 1 ) {
			STs[ 1 ].x = 0;
		}
		
		if ( STs[ 2 ].y < 0 ) {
			STs[ 2 ].y = patch_dim - 1;
		}
		if ( STs[ 3 ].y > patch_dim - 1 ) {
			STs[ 3 ].y = 0;
		}
	}
	
	vec3 data[ 4 ];
	data[ 0 ] = imageLoad( sourceTex, STs[ 0 ] ).xyz;
	data[ 1 ] = imageLoad( sourceTex, STs[ 1 ] ).xyz;
	data[ 2 ] = imageLoad( sourceTex, STs[ 2 ] ).xyz;
	data[ 3 ] = imageLoad( sourceTex, STs[ 3 ] ).xyz;
	
	float ds = patch_length / float( patch_dim );
	
	float dsdx = 2.0f * ds + ( data[ 1 ].x - data[ 0 ].x );
	float dsdy = 2.0f * ds + ( data[ 3 ].y - data[ 2 ].y );
	
	float dzdx = data[ 1 ].z - data[ 0 ].z;
	float dzdy = data[ 3 ].z - data[ 2 ].z;
	
	vec3 xdir = normalize( vec3( dsdx, 0.0, dzdx ) );
	vec3 ydir = normalize( vec3( 0.0, dsdy, dzdy ) );
	
	vec3 normal = normalize( cross( xdir, ydir ) );// * 10.0f;
	//vec3 normal = normalize( cross( ydir, xdir ) );
	
	// Calculate the jacobian here too
	float Jacobian = 1.0f;
	{
		vec3 deltaX = data[ 1 ] - data[ 0 ];
		vec3 deltaY = data[ 3 ] - data[ 2 ];
		Jacobian = ( 1.0f + deltaX.x ) * ( 1.0f + deltaY.y ) - deltaX.y * deltaY.x;
	}
	//Jacobian = 1.0f;
	
	imageStore( destTex, stCenter, vec4( normal.x, normal.y, normal.z, Jacobian ) );
}
 
 